/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,5],$V2=[2,5,9],$V3=[1,26],$V4=[1,31],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,32],$Va=[1,33],$Vb=[2,9,11,14,22,25,26,28,40,53],$Vc=[1,41],$Vd=[8,21],$Ve=[1,93],$Vf=[1,91],$Vg=[1,90],$Vh=[1,88],$Vi=[1,89],$Vj=[1,92],$Vk=[21,22,25,26,28,32,40],$Vl=[2,8,9,11,14,22,24,25,26,27,28,30,40,43,44,48,51,52,53,59,60,61,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81],$Vm=[8,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81],$Vn=[2,137],$Vo=[1,132],$Vp=[1,128],$Vq=[1,139],$Vr=[1,129],$Vs=[1,130],$Vt=[1,138],$Vu=[1,131],$Vv=[1,137],$Vw=[1,117],$Vx=[1,125],$Vy=[1,124],$Vz=[1,126],$VA=[1,127],$VB=[1,133],$VC=[1,134],$VD=[1,135],$VE=[32,64,65,67,69,70,71,72,73,74,75,76,77,78,79,80,81],$VF=[1,142],$VG=[1,148],$VH=[1,158],$VI=[2,8,11,14,22,24,25,26,27,28,30,40,43,44,48,51,52,53,59,60,61,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81],$VJ=[1,161],$VK=[2,135],$VL=[8,32,66],$VM=[1,187],$VN=[1,188],$VO=[1,173],$VP=[1,174],$VQ=[1,175],$VR=[1,176],$VS=[1,177],$VT=[1,178],$VU=[1,179],$VV=[1,180],$VW=[1,181],$VX=[1,182],$VY=[1,183],$VZ=[1,184],$V_=[1,185],$V$=[1,186],$V01=[8,32,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81],$V11=[32,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81],$V21=[1,223],$V31=[1,224],$V41=[1,222],$V51=[1,225],$V61=[8,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CLASS":4,"EOF":5,"DEF":6,"ERROR":7,"tk_puntoComa":8,"tk_public":9,"A":10,"tk_id":11,"tk_lla":12,"METHODS":13,"tk_llc":14,"tk_class":15,"tk_interface":16,"DEFMET":17,"VARIABLES1":18,"BOOLEAN":19,"PRINTSENTENCE":20,"tk_coma":21,"tk_string":22,"=":23,"tk_cadena":24,"tk_char":25,"tk_int":26,"tk_numero":27,"tk_double":28,"TYPE":29,"tk_pa":30,"PARAMETERS":31,"tk_pc":32,"SENTENCES":33,"tk_static":34,"tk_void":35,"tk_main":36,"tk_ca":37,"tk_cc":38,"tk_args":39,"tk_boolean":40,"DEFPA":41,"DEFSENT":42,"tk_do":43,"tk_while":44,"EXPRE":45,"VARIABLES":46,"RETURNS":47,"tk_for":48,"CONDITION":49,"DEC":50,"tk_if":51,"tk_else":52,"tk_system":53,".":54,"tk_out":55,"tk_print":56,"EXP":57,"tk_println":58,"tk_break":59,"tk_continue":60,"tk_return":61,"tk_true":62,"tk_false":63,"++":64,"--":65,",":66,"&&":67,"DEFEXP":68,"||":69,"!":70,"^":71,"<":72,"<=":73,">=":74,">":75,"==":76,"!=":77,"+":78,"-":79,"*":80,"/":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"tk_puntoComa",9:"tk_public",11:"tk_id",12:"tk_lla",14:"tk_llc",15:"tk_class",16:"tk_interface",21:"tk_coma",22:"tk_string",23:"=",24:"tk_cadena",25:"tk_char",26:"tk_int",27:"tk_numero",28:"tk_double",30:"tk_pa",32:"tk_pc",34:"tk_static",35:"tk_void",36:"tk_main",37:"tk_ca",38:"tk_cc",39:"tk_args",40:"tk_boolean",43:"tk_do",44:"tk_while",48:"tk_for",51:"tk_if",52:"tk_else",53:"tk_system",54:".",55:"tk_out",56:"tk_print",58:"tk_println",59:"tk_break",60:"tk_continue",61:"tk_return",62:"tk_true",63:"tk_false",64:"++",65:"--",66:",",67:"&&",69:"||",70:"!",71:"^",72:"<",73:"<=",74:">=",75:">",76:"==",77:"!=",78:"+",79:"-",80:"*",81:"/"},
productions_: [0,[3,2],[4,2],[4,1],[4,3],[4,2],[6,6],[6,5],[10,1],[10,1],[10,2],[13,2],[13,1],[13,3],[13,2],[13,2],[13,1],[13,2],[13,1],[13,3],[13,2],[18,3],[18,4],[18,4],[18,4],[18,4],[18,4],[18,4],[18,2],[18,2],[18,2],[18,2],[18,3],[18,3],[17,9],[17,8],[17,8],[17,7],[17,7],[17,6],[17,13],[17,12],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,2],[31,2],[31,1],[31,2],[41,2],[41,2],[41,2],[41,2],[41,2],[41,1],[33,4],[33,3],[33,5],[33,4],[33,10],[33,9],[33,9],[33,8],[33,3],[33,2],[33,3],[33,2],[33,2],[33,1],[33,2],[33,1],[33,3],[33,2],[33,3],[33,2],[42,8],[42,4],[42,4],[42,5],[42,1],[20,9],[20,9],[47,1],[47,1],[47,2],[19,5],[19,5],[50,2],[50,2],[50,2],[49,2],[49,2],[49,2],[49,2],[49,3],[49,3],[49,2],[46,3],[46,4],[46,4],[46,4],[46,4],[46,4],[46,4],[46,4],[46,2],[46,2],[46,2],[46,2],[46,3],[46,3],[45,3],[45,1],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,2],[57,2],[57,3],[57,1],[57,1],[57,1],[57,0],[68,1],[68,1],[68,1],[68,3],[7,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new Nodo("RAIZ",""); 
                            this.$.addHijo($$[$0-1]);
                            return this.$;
                        
break;
case 2:
 this.$ = new Nodo("CLASE","");
                        this.$.addHijo($$[$0-1]);
                        this.$.addHijo($$[$0]);
                    
break;
case 3:
 this.$ = new Nodo("CLASE","");
                        this.$.addHijo($$[$0]);
                    
break;
case 6:
 this.$ = new Nodo($$[$0-5],"public");
                                                                this.$.addHijo($$[$0-4]);
                                                                this.$.addHijo(new Nodo($$[$0-3],"id"));
                                                                this.$.addHijo(new Nodo($$[$0-2],"{"));
                                                                this.$.addHijo($$[$0-1]);
                                                                this.$.addHijo(new Nodo($$[$0],"}"));
                                                                tokenArray.push("Token: " +$$[$0-5]+ " - Tipo: palabra reservada");  
                                                                tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: id"); 
                                                                tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                            
break;
case 7:
 this.$ = new Nodo($$[$0-4],"public");
                                                                this.$.addHijo($$[$0-3]);
                                                                this.$.addHijo(new Nodo($$[$0-2],"id"));
                                                                this.$.addHijo(new Nodo($$[$0-1],"{"));
                                                                this.$.addHijo(new Nodo($$[$0],"}"));
                                                                tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: palabra reservada"); 
                                                                tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id"); 
                                                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                            
break;
case 8:
 this.$ = new Nodo($$[$0],"class"); tokenArray.push("Token: " +$$[$0]+ " - Tipo: palabra reservada"); 
break;
case 9:
 this.$ = new Nodo($$[$0],"interface"); tokenArray.push("Token: " +$$[$0]+ " - Tipo: palabra reservada");
break;
case 11:
 this.$ = new Nodo("METODOS","");
                                this.$.addHijo($$[$0-1]);
                                this.$.addHijo($$[$0]); 
                            
break;
case 12: case 16:
 this.$ = new Nodo("METODOS","");
                                this.$.addHijo($$[$0]);
                            
break;
case 13:
 this.$ = new Nodo("METODOS","");
                                                this.$.addHijo($$[$0-2]);
                                                this.$.addHijo($$[$0-1]); 
                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo");
                                            
break;
case 14:
 this.$ = new Nodo("METODOS","");
                                                this.$.addHijo($$[$0-1]);
                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo");
                                            
break;
case 15:
 this.$ = new Nodo("METODOS","");
                                this.$.addHijo($$[$0-1]);
                                this.$.addHijo($$[$0]);
                            
break;
case 17:
 this.$ = new Nodo("METODOS","");
                                                this.$.addHijo($$[$0-1]);
                                                this.$.addHijo($$[$0]);
                                            
break;
case 18:
 this.$ = new Nodo("METODOS","");
                                                this.$.addHijo($$[$0]);
                                            
break;
case 21: case 101:
 this.$ = new Nodo("VARIAB","");
                                            this.$.addHijo($$[$0-2]);
                                            this.$.addHijo(new Nodo($$[$0-1],","));
                                            this.$.addHijo(new Nodo($$[$0],"id"));
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                                        
break;
case 22:
 this.$ = new Nodo("VARIAB","");
                                            this.$.addHijo(new Nodo($$[$0-3],"string"));
                                            this.$.addHijo(new Nodo($$[$0-2],"id"));
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"cadena"));
                                            tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: string"); 
                                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id"); 
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: cadena"); 
                                        
break;
case 23:
 this.$ = new Nodo("VARIAB","");
                                            this.$.addHijo(new Nodo($$[$0-3],"char"));
                                            this.$.addHijo(new Nodo($$[$0-2],"id"));
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"cadena"));
                                            tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: char"); 
                                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id"); 
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: cadena"); 
                                        
break;
case 24:
 this.$ = new Nodo("VARIAB","");
                                            this.$.addHijo(new Nodo($$[$0-3],"int"));
                                            this.$.addHijo(new Nodo($$[$0-2],"id"));
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"numero"));
                                            tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: int"); 
                                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id"); 
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: numero"); 
                                        
break;
case 25:
 this.$ = new Nodo("VARIAB","");
                                            this.$.addHijo(new Nodo($$[$0-3],"double"));
                                            this.$.addHijo(new Nodo($$[$0-2],"id"));
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"numero"));
                                            tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: double"); 
                                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id"); 
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: numero"); 
                                        
break;
case 26:
 this.$ = new Nodo("VARIAB","");
                                            this.$.addHijo(new Nodo($$[$0-3],"int"));
                                            this.$.addHijo(new Nodo($$[$0-2],"id"));
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"id"));
                                            tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: int"); 
                                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id"); 
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                                        
break;
case 27:
 this.$ = new Nodo("VARIAB","");
                                            this.$.addHijo(new Nodo($$[$0-3],"double"));
                                            this.$.addHijo(new Nodo($$[$0-2],"id"));
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"id"));
                                            tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: double"); 
                                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id"); 
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                                        
break;
case 28:
 this.$ = new Nodo("VARIAB","");
                                this.$.addHijo(new Nodo($$[$0-1],"string"));
                                this.$.addHijo(new Nodo($$[$0],"id"));
                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: string"); 
                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                            
break;
case 29:
 this.$ = new Nodo("VARIAB","");
                                this.$.addHijo(new Nodo($$[$0-1],"char"));
                                this.$.addHijo(new Nodo($$[$0],"id"));
                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: char"); 
                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                            
break;
case 30:
 this.$ = new Nodo("VARIAB","");
                                this.$.addHijo(new Nodo($$[$0-1],"int"));
                                this.$.addHijo(new Nodo($$[$0],"id"));
                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: int"); 
                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                            
break;
case 31:
 this.$ = new Nodo("VARIAB","");
                                this.$.addHijo(new Nodo($$[$0-1],"double"));
                                this.$.addHijo(new Nodo($$[$0],"id"));
                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: double"); 
                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                            
break;
case 32:
 this.$ = new Nodo("VARIAB","");
                                        this.$.addHijo(new Nodo($$[$0-2],"id"));
                                        this.$.addHijo(new Nodo($$[$0-1],"="));
                                        this.$.addHijo(new Nodo($$[$0],"numero"));
                                        tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id"); 
                                        tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: numero"); 
                                    
break;
case 33:
 this.$ = new Nodo("VARIAB","");
                                        this.$.addHijo(new Nodo($$[$0-2],"id"));
                                        this.$.addHijo(new Nodo($$[$0-1],"="));
                                        this.$.addHijo(new Nodo($$[$0],"cadena"));
                                        tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id"); 
                                        tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: cadena"); 
                                    
break;
case 34:
 this.$ = new Nodo("public","1");
                                                                                    this.$.addHijo($$[$0-7]);
                                                                                    this.$.addHijo(new Nodo($$[$0-6],"id"));
                                                                                    this.$.addHijo(new Nodo($$[$0-5],"("));
                                                                                    this.$.addHijo($$[$0-4]);
                                                                                    this.$.addHijo(new Nodo($$[$0-3],")"));
                                                                                    this.$.addHijo(new Nodo($$[$0-2],"{"));
                                                                                    this.$.addHijo($$[$0-1]);
                                                                                    this.$.addHijo(new Nodo($$[$0],"}"));
                                                                                    tokenArray.push("Token: " +$$[$0-8]+ " - Tipo: palabra reservada"); 
                                                                                    tokenArray.push("Token: " +$$[$0-6]+ " - Tipo: id"); 
                                                                                    tokenArray.push("Token: " +$$[$0-5]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                                                
break;
case 35:
 this.$ = new Nodo("public","2");
                                                                                    this.$.addHijo($$[$0-6]);
                                                                                    this.$.addHijo(new Nodo($$[$0-5],"id"));
                                                                                    this.$.addHijo(new Nodo($$[$0-2],"{"));
                                                                                    this.$.addHijo($$[$0-1]);
                                                                                    this.$.addHijo(new Nodo($$[$0],"}"));
                                                                                    tokenArray.push("Token: " +$$[$0-7]+ " - Tipo: palabra reservada"); 
                                                                                    tokenArray.push("Token: " +$$[$0-5]+ " - Tipo: id"); 
                                                                                    tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                                                
break;
case 36:
 this.$ = new Nodo("public","3");
                                                                                    this.$.addHijo($$[$0-6]);
                                                                                    this.$.addHijo(new Nodo($$[$0-5],"id"));
                                                                                    this.$.addHijo(new Nodo($$[$0-4],"("));
                                                                                    this.$.addHijo($$[$0-3]);
                                                                                    this.$.addHijo(new Nodo($$[$0-2],")"));
                                                                                    tokenArray.push("Token: " +$$[$0-7]+ " - Tipo: palabra reservada"); 
                                                                                    tokenArray.push("Token: " +$$[$0-5]+ " - Tipo: id"); 
                                                                                    tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                                                
break;
case 37:
 this.$ = new Nodo("public","4");
                                                                                    this.$.addHijo($$[$0-5]);
                                                                                    this.$.addHijo(new Nodo($$[$0-4],"id"));
                                                                                    tokenArray.push("Token: " +$$[$0-6]+ " - Tipo: palabra reservada"); 
                                                                                    tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: id"); 
                                                                                    tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                                                
break;
case 38:
 this.$ = new Nodo("public","5");
                                                                                    this.$.addHijo($$[$0-5]);
                                                                                    this.$.addHijo(new Nodo($$[$0-4],"id"));
                                                                                    this.$.addHijo(new Nodo($$[$0-3],"("));
                                                                                    this.$.addHijo($$[$0-2]);
                                                                                    this.$.addHijo(new Nodo($$[$0-1],")"));
                                                                                    this.$.addHijo(new Nodo($$[$0],";"));
                                                                                    tokenArray.push("Token: " +$$[$0-6]+ " - Tipo: palabra reservada"); 
                                                                                    tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: id"); 
                                                                                    tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                                                
break;
case 39:
 this.$ = new Nodo("public","6");
                                                                                    this.$.addHijo($$[$0-4]);
                                                                                    this.$.addHijo(new Nodo($$[$0-3],"id"));
                                                                                    this.$.addHijo(new Nodo($$[$0],";"));
                                                                                    tokenArray.push("Token: " +$$[$0-5]+ " - Tipo: palabra reservada"); 
                                                                                    tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: id"); 
                                                                                    tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                                                                    tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                                                
break;
case 40:
 this.$ = new Nodo("public","7");
                                                                                                                this.$.addHijo(new Nodo($$[$0-9],"main"));
                                                                                                                this.$.addHijo(new Nodo($$[$0-2],"{"));
                                                                                                                this.$.addHijo($$[$0-1]);
                                                                                                                this.$.addHijo(new Nodo($$[$0],"}"));
                                                                                                                tokenArray.push("Token: " +$$[$0-12]+ " - Tipo: palabra reservada"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-11]+ " - Tipo: palabra reservada"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-10]+ " - Tipo: palabra reservada"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-9]+ " - Tipo: palabra reservada"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-8]+ " - Tipo: simbolo"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-7]+ " - Tipo: palabra reservada"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-6]+ " - Tipo: simbolo"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-5]+ " - Tipo: simbolo"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: palabra reservada"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: simbolo"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                                                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                                                                            
break;
case 41:
 this.$ = new Nodo("public","8");
                                                                                                                this.$.addHijo(new Nodo($$[$0-8],"main"));
                                                                                                                this.$.addHijo(new Nodo($$[$0-1],"{"));
                                                                                                                this.$.addHijo(new Nodo($$[$0],"}"));
                                                                                                                tokenArray.push("Token: " +$$[$0-11]+ " - Tipo: palabra reservada"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-10]+ " - Tipo: palabra reservada"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-9]+ " - Tipo: palabra reservada"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-8]+ " - Tipo: palabra reservada"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-7]+ " - Tipo: simbolo"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-6]+ " - Tipo: palabra reservada"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-5]+ " - Tipo: simbolo"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: simbolo"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: palabra reservada"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                                                                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                                                                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                                                                            
break;
case 42:
 this.$ = new Nodo($$[$0],"int");      tokenArray.push("Token: " +$$[$0]+ " - Tipo: palabra reservada"); 
break;
case 43:
 this.$ = new Nodo($$[$0],"double");   tokenArray.push("Token: " +$$[$0]+ " - Tipo: palabra reservada"); 
break;
case 44:
 this.$ = new Nodo($$[$0],"char");     tokenArray.push("Token: " +$$[$0]+ " - Tipo: palabra reservada"); 
break;
case 45:
 this.$ = new Nodo($$[$0],"string");   tokenArray.push("Token: " +$$[$0]+ " - Tipo: palabra reservada"); 
break;
case 46:
 this.$ = new Nodo($$[$0],"void");     tokenArray.push("Token: " +$$[$0]+ " - Tipo: palabra reservada"); 
break;
case 47:
 this.$ = new Nodo($$[$0],"static");   tokenArray.push("Token: " +$$[$0]+ " - Tipo: palabra reservada"); 
break;
case 48:
 this.$ = new Nodo($$[$0],"boolean");  tokenArray.push("Token: " +$$[$0]+ " - Tipo: palabra reservada"); 
break;
case 50:
 this.$ = new Nodo("PARAMET","");
                                    this.$.addHijo($$[$0-1]);
                                    this.$.addHijo($$[$0]);
                                
break;
case 51:
 this.$ = new Nodo("PARAMET","");
                                    this.$.addHijo($$[$0]);
                                
break;
case 53:
 this.$ = new Nodo($$[$0-1],"int"); 
                                this.$.addHijo(new Nodo($$[$0],"id"));
                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada"); 
                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                            
break;
case 54:
 this.$ = new Nodo($$[$0-1],"double"); 
                                this.$.addHijo(new Nodo($$[$0],"id"));
                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada"); 
                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                            
break;
case 55:
 this.$ = new Nodo($$[$0-1],"char"); 
                                this.$.addHijo(new Nodo($$[$0],"id"));
                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada"); 
                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                            
break;
case 56:
 this.$ = new Nodo($$[$0-1],"string"); 
                                this.$.addHijo(new Nodo($$[$0],"id"));
                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada"); 
                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                            
break;
case 57:
 this.$ = new Nodo($$[$0-1],"boolean"); 
                                this.$.addHijo(new Nodo($$[$0],"id"));
                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada"); 
                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                            
break;
case 58:
 this.$ = new Nodo($$[$0],","); 
                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                            
break;
case 59:
 this.$ = new Nodo("SENTENCIAS","1");
                                                this.$.addHijo($$[$0-3]);
                                                this.$.addHijo($$[$0-2]);
                                                this.$.addHijo(new Nodo($$[$0-1],"{"));
                                                this.$.addHijo(new Nodo($$[$0],"}"));
                                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                            
break;
case 60:
 this.$ = new Nodo("SENTENCIAS","2");
                                                this.$.addHijo($$[$0-2]);
                                                this.$.addHijo(new Nodo($$[$0-1],"{"));
                                                this.$.addHijo(new Nodo($$[$0],"}"));
                                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                            
break;
case 61:
 this.$ = new Nodo("SENTENCIAS","3");
                                                    this.$.addHijo($$[$0-4]);
                                                    this.$.addHijo($$[$0-3]);
                                                    this.$.addHijo(new Nodo($$[$0-2],"{"));
                                                    this.$.addHijo($$[$0-1]);
                                                    this.$.addHijo(new Nodo($$[$0],"}"));
                                                    tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                    tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                
break;
case 62:
 this.$ = new Nodo("SENTENCIAS","4");
                                                    this.$.addHijo($$[$0-3]);
                                                    this.$.addHijo(new Nodo($$[$0-2],"{"));
                                                    this.$.addHijo($$[$0-1]);
                                                    this.$.addHijo(new Nodo($$[$0],"}"));
                                                    tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                    tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                
break;
case 63:
 this.$ = new Nodo("SENTENCIAS","5");
                                                                                        this.$.addHijo(new Nodo($$[$0-9],"doWhile"));
                                                                                        this.$.addHijo($$[$0-8]);
                                                                                        this.$.addHijo(new Nodo($$[$0-7],"{"));
                                                                                        this.$.addHijo($$[$0-6]);
                                                                                        this.$.addHijo(new Nodo($$[$0-5],"}"));
                                                                                        this.$.addHijo(new Nodo($$[$0-3],"("));
                                                                                        this.$.addHijo($$[$0-2]);
                                                                                        this.$.addHijo(new Nodo($$[$0-1],")"));
                                                                                        tokenArray.push("Token: " +$$[$0-8]+ " - Tipo: palabra reservada"); 
                                                                                        tokenArray.push("Token: " +$$[$0-7]+ " - Tipo: simbolo"); 
                                                                                        tokenArray.push("Token: " +$$[$0-5]+ " - Tipo: simbolo"); 
                                                                                        tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: palabra reservada"); 
                                                                                        tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: simbolo"); 
                                                                                        tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                                                                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                                                    
break;
case 64:
 this.$ = new Nodo("SENTENCIAS","6");
                                                                                        this.$.addHijo(new Nodo($$[$0-8],"doWhile"));
                                                                                        this.$.addHijo(new Nodo($$[$0-7],"{"));
                                                                                        this.$.addHijo($$[$0-6]);
                                                                                        this.$.addHijo(new Nodo($$[$0-5],"}"));
                                                                                        this.$.addHijo(new Nodo($$[$0-3],"("));
                                                                                        this.$.addHijo($$[$0-2]);
                                                                                        this.$.addHijo(new Nodo($$[$0-1],")"));
                                                                                        tokenArray.push("Token: " +$$[$0-8]+ " - Tipo: palabra reservada"); 
                                                                                        tokenArray.push("Token: " +$$[$0-7]+ " - Tipo: simbolo"); 
                                                                                        tokenArray.push("Token: " +$$[$0-5]+ " - Tipo: simbolo"); 
                                                                                        tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: palabra reservada"); 
                                                                                        tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: simbolo"); 
                                                                                        tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                                                                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                                                    
break;
case 65:
 this.$ = new Nodo("SENTENCIAS","7");
                                                                                this.$.addHijo(new Nodo($$[$0-8],"doWhile"));
                                                                                this.$.addHijo($$[$0-7]);
                                                                                this.$.addHijo(new Nodo($$[$0-6],"{"));
                                                                                this.$.addHijo(new Nodo($$[$0-5],"}"));
                                                                                this.$.addHijo(new Nodo($$[$0-3],"("));
                                                                                this.$.addHijo($$[$0-2]);
                                                                                this.$.addHijo(new Nodo($$[$0-1],")"));
                                                                                tokenArray.push("Token: " +$$[$0-7]+ " - Tipo: palabra reservada"); 
                                                                                tokenArray.push("Token: " +$$[$0-6]+ " - Tipo: simbolo"); 
                                                                                tokenArray.push("Token: " +$$[$0-5]+ " - Tipo: simbolo"); 
                                                                                tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: palabra reservada"); 
                                                                                tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: simbolo"); 
                                                                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                                            
break;
case 66:
 this.$ = new Nodo("SENTENCIAS","8");
                                                                                this.$.addHijo(new Nodo($$[$0-7],"doWhile"));
                                                                                this.$.addHijo(new Nodo($$[$0-6],"{"));
                                                                                this.$.addHijo(new Nodo($$[$0-5],"}"));
                                                                                this.$.addHijo(new Nodo($$[$0-3],"("));
                                                                                this.$.addHijo($$[$0-2]);
                                                                                this.$.addHijo(new Nodo($$[$0-1],")"));
                                                                                tokenArray.push("Token: " +$$[$0-7]+ " - Tipo: palabra reservada"); 
                                                                                tokenArray.push("Token: " +$$[$0-6]+ " - Tipo: simbolo"); 
                                                                                tokenArray.push("Token: " +$$[$0-5]+ " - Tipo: simbolo"); 
                                                                                tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: palabra reservada"); 
                                                                                tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: simbolo"); 
                                                                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo");
                                                                            
break;
case 67:
 this.$ = new Nodo("SENTENCIAS","9");
                                            this.$.addHijo($$[$0-2]);
                                            this.$.addHijo($$[$0-1]);
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                        
break;
case 68:
 this.$ = new Nodo("SENTENCIAS","10");
                                            this.$.addHijo($$[$0-1]);
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                        
break;
case 69:
 this.$ = new Nodo("SENTENCIAS","11");
                                            this.$.addHijo($$[$0-2]);
                                            this.$.addHijo($$[$0-1]);
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                        
break;
case 70:
 this.$ = new Nodo("SENTENCIAS","12");
                                            this.$.addHijo($$[$0-1]);
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                        
break;
case 71:
 this.$ = new Nodo("SENTENCIAS","13");
                                this.$.addHijo($$[$0-1]);
                                this.$.addHijo($$[$0]);
                            
break;
case 72:
 this.$ = new Nodo("SENTENCIAS","14");
                                this.$.addHijo($$[$0]);
                            
break;
case 73:
 this.$ = new Nodo("SENTENCIAS","15");
                                                this.$.addHijo($$[$0-1]);
                                                this.$.addHijo($$[$0]);
                                            
break;
case 74:
 this.$ = new Nodo("SENTENCIAS","16");
                                                this.$.addHijo($$[$0]);
                                            
break;
case 75:
 this.$ = new Nodo("SENTENCIAS","17");
                                        this.$.addHijo($$[$0-2]);
                                        this.$.addHijo($$[$0-1]);
                                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                    
break;
case 76:
 this.$ = new Nodo("SENTENCIAS","18");
                                        this.$.addHijo($$[$0-1]);
                                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                    
break;
case 77:
console.log("Error sintactico - linea: "+(yylineno - 1)+" - columna: "+this._$.first_column+" - Se esperaba una sentencia");
break;
case 79:
 this.$ = new Nodo("for","1");
                                                                                this.$.addHijo(new Nodo($$[$0-6],"("));
                                                                                this.$.addHijo($$[$0-5]);
                                                                                this.$.addHijo(new Nodo($$[$0-4],";"));
                                                                                this.$.addHijo($$[$0-3]);
                                                                                this.$.addHijo(new Nodo($$[$0-2],";"));
                                                                                this.$.addHijo($$[$0-1]);
                                                                                this.$.addHijo(new Nodo($$[$0],")"));
                                                                                tokenArray.push("Token: " +$$[$0-7]+ " - Tipo: palabra reservada"); 
                                                                                tokenArray.push("Token: " +$$[$0-6]+ " - Tipo: simbolo"); 
                                                                                tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: simbolo"); 
                                                                                tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                                                
                                                                            
break;
case 80:
 this.$ = new Nodo("while","2");
                                                                                this.$.addHijo(new Nodo($$[$0-2],"("));
                                                                                this.$.addHijo($$[$0-1]);
                                                                                this.$.addHijo(new Nodo($$[$0],")"));
                                                                                tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: palabra reservada"); 
                                                                                tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo");
                                                                            
break;
case 81:
 this.$ = new Nodo("if","3");
                                                                                this.$.addHijo(new Nodo($$[$0-2],"("));
                                                                                this.$.addHijo($$[$0-1]);
                                                                                this.$.addHijo(new Nodo($$[$0],")"));
                                                                                tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: palabra reservada"); 
                                                                                tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo");
                                                                            
break;
case 82:
 this.$ = new Nodo("elif","4");
                                                                                this.$.addHijo(new Nodo($$[$0-2],"("));
                                                                                this.$.addHijo($$[$0-1]);
                                                                                this.$.addHijo(new Nodo($$[$0],")"));
                                                                                tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: palabra reservada"); 
                                                                                tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: palabra reservada"); 
                                                                                tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo");
                                                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo");
                                                                            
break;
case 83:
 this.$ = new Nodo("else","5");
                                                                                this.$.addHijo(new Nodo($$[$0],"else"));
                                                                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: palabra reservada"); 
                                                                            
break;
case 84: case 85:
 this.$ = new Nodo("PRINT","");
                                                                        this.$.addHijo(new Nodo($$[$0-3],"("));
                                                                        this.$.addHijo($$[$0-2]);
                                                                        this.$.addHijo(new Nodo($$[$0-1],")"));
                                                                        tokenArray.push("Token: " +$$[$0-8]+ " - Tipo: palabra reservada"); 
                                                                        tokenArray.push("Token: " +$$[$0-7]+ " - Tipo: simbolo"); 
                                                                        tokenArray.push("Token: " +$$[$0-6]+ " - Tipo: palabra reservada");
                                                                        tokenArray.push("Token: " +$$[$0-5]+ " - Tipo: simbolo");
                                                                        tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: palabra reservada");
                                                                        tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: simbolo");
                                                                        tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");
                                                                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo");
                                                                    
break;
case 86:
 this.$ = new Nodo("RET","1");
                        this.$.addHijo(new Nodo($$[$0],"break"));
                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: palabra reservada"); 
                    
break;
case 87:
 this.$ = new Nodo("RET","2");
                        this.$.addHijo(new Nodo($$[$0],"continue"));
                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: palabra reservada"); 
                    
break;
case 88:
 this.$ = new Nodo("RET","3");
                        this.$.addHijo(new Nodo($$[$0-1],"return"));
                        this.$.addHijo($$[$0]);
                        tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada"); 
                    
break;
case 89:
 this.$ = new Nodo("BOOLE","");
                                                        this.$.addHijo(new Nodo($$[$0-4],"boolean"));
                                                        this.$.addHijo(new Nodo($$[$0-3],"id"));
                                                        this.$.addHijo(new Nodo($$[$0-2],"="));
                                                        this.$.addHijo(new Nodo($$[$0-1],"true"));
                                                        tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: palabra reservada"); 
                                                        tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: id"); 
                                                        tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                        tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada"); 
                                                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                    
break;
case 90:
 this.$ = new Nodo("BOOLE","");
                                                        this.$.addHijo(new Nodo($$[$0-4],"boolean"));
                                                        this.$.addHijo(new Nodo($$[$0-3],"id"));
                                                        this.$.addHijo(new Nodo($$[$0-2],"="));
                                                        this.$.addHijo(new Nodo($$[$0-1],"false"));
                                                        tokenArray.push("Token: " +$$[$0-4]+ " - Tipo: palabra reservada"); 
                                                        tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: id"); 
                                                        tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                                                        tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada"); 
                                                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                                                    
break;
case 91:
 this.$ = new Nodo("DEC",""); 
                    this.$.addHijo(new Nodo($$[$0-1],"id"));
                    this.$.addHijo(new Nodo("++","adicion"));
                    tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: id"); 
                    tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                
break;
case 92:
 this.$ = new Nodo("DEC",""); 
                    this.$.addHijo(new Nodo($$[$0-1],"id"));
                    this.$.addHijo(new Nodo("--","sustraccion"));
                    tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: id"); 
                    tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                
break;
case 94:
 this.$ = new Nodo("COND","");
                                            this.$.addHijo(new Nodo($$[$0-1],"int"));
                                            this.$.addHijo(new Nodo($$[$0],"id"));
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                                        
break;
case 95:
 this.$ = new Nodo("COND","");
                                            this.$.addHijo(new Nodo($$[$0-1],"double"));
                                            this.$.addHijo(new Nodo($$[$0],"id"));
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                                        
break;
case 96:
 this.$ = new Nodo("COND","");
                                            this.$.addHijo(new Nodo($$[$0-1],"char"));
                                            this.$.addHijo(new Nodo($$[$0],"id"));
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                                        
break;
case 97:
 this.$ = new Nodo("COND","");
                                            this.$.addHijo(new Nodo($$[$0-1],"string"));
                                            this.$.addHijo(new Nodo($$[$0],"id"));
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                                        
break;
case 98:
 this.$ = new Nodo("COND","");
                                            this.$.addHijo($$[$0-2]);
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"numero"));
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: numero"); 
                                        
break;
case 99:
 this.$ = new Nodo("COND","");
                                            this.$.addHijo($$[$0-2]);
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"id"));
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                                        
break;
case 102:
 this.$ = new Nodo("VARIAB","");
                                            this.$.addHijo(new Nodo($$[$0-3],"string"));
                                            this.$.addHijo(new Nodo($$[$0-2],"id"));
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"cadena"));
                                            tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: palabra reservada");
                                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id");  
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: cadena"); 
                                        
break;
case 103:
 this.$ = new Nodo("VARIAB","");
                                            this.$.addHijo(new Nodo($$[$0-3],"string"));
                                            this.$.addHijo(new Nodo($$[$0-2],"id"));
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"id"));
                                            tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: palabra reservada");
                                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id");  
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                                        
break;
case 104:
 this.$ = new Nodo("VARIAB","");
                                            this.$.addHijo(new Nodo($$[$0-3],"char"));
                                            this.$.addHijo(new Nodo($$[$0-2],"id"));
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"cadena"));
                                            tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: palabra reservada");
                                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id");  
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: cadena"); 
                                        
break;
case 105:
 this.$ = new Nodo("VARIAB","");
                                            this.$.addHijo(new Nodo($$[$0-3],"int"));
                                            this.$.addHijo(new Nodo($$[$0-2],"id"));
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"numero"));
                                            tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: palabra reservada");
                                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id");  
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: numero"); 
                                        
break;
case 106:
 this.$ = new Nodo("VARIAB","");
                                            this.$.addHijo(new Nodo($$[$0-3],"double"));
                                            this.$.addHijo(new Nodo($$[$0-2],"id"));
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"numero"));
                                            tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: palabra reservada");
                                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id");  
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: numero"); 
                                        
break;
case 107:
 this.$ = new Nodo("VARIAB","");
                                            this.$.addHijo(new Nodo($$[$0-3],"int"));
                                            this.$.addHijo(new Nodo($$[$0-2],"id"));
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"id"));
                                            tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: palabra reservada");
                                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id");  
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                                        
break;
case 108:
 this.$ = new Nodo("VARIAB","");
                                            this.$.addHijo(new Nodo($$[$0-3],"double"));
                                            this.$.addHijo(new Nodo($$[$0-2],"id"));
                                            this.$.addHijo(new Nodo($$[$0-1],"="));
                                            this.$.addHijo(new Nodo($$[$0],"id"));
                                            tokenArray.push("Token: " +$$[$0-3]+ " - Tipo: palabra reservada");
                                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id");  
                                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo"); 
                                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                                        
break;
case 109:
 this.$ = new Nodo("VARIAB","");
                                this.$.addHijo(new Nodo($$[$0-1],"string"));
                                this.$.addHijo(new Nodo($$[$0],"id"));
                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada");
                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: id");  
                            
break;
case 110:
 this.$ = new Nodo("VARIAB","");
                                this.$.addHijo(new Nodo($$[$0-1],"char"));
                                this.$.addHijo(new Nodo($$[$0],"id"));
                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada");
                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: id");  
                            
break;
case 111:
 this.$ = new Nodo("VARIAB","");
                                this.$.addHijo(new Nodo($$[$0-1],"int"));
                                this.$.addHijo(new Nodo($$[$0],"id"));
                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada");
                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: id");  
                            
break;
case 112:
 this.$ = new Nodo("VARIAB","");
                                this.$.addHijo(new Nodo($$[$0-1],"double"));
                                this.$.addHijo(new Nodo($$[$0],"id"));
                                tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: palabra reservada");
                                tokenArray.push("Token: " +$$[$0]+ " - Tipo: id");  
                            
break;
case 113:
 this.$ = new Nodo("VARIAB","");
                                        this.$.addHijo(new Nodo($$[$0-2],"id"));
                                        this.$.addHijo(new Nodo($$[$0-1],"="));
                                        this.$.addHijo(new Nodo($$[$0],"numero"));
                                        tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id");
                                        tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: numero");  
                                    
break;
case 114:
 this.$ = new Nodo("VARIAB","");
                                        this.$.addHijo(new Nodo($$[$0-2],"id"));
                                        this.$.addHijo(new Nodo($$[$0-1],"="));
                                        this.$.addHijo(new Nodo($$[$0],"cadena"));
                                        tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: id");
                                        tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: cadena");  
                                    
break;
case 115:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],","));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 116:
 this.$ = new Nodo("EXP","");
                                this.$.addHijo($$[$0]);
                        
break;
case 117:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],"&&"));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 118:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],"||"));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 119:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],"!"));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 120:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],"^"));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 121:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],"<"));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 122:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],"<="));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 123:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],">="));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 124:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],">"));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 125:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],"=="));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 126:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],"!="));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 127:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],"+"));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 128:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],"-"));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 129:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],"*"));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 130:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo($$[$0-2]);
                            this.$.addHijo(new Nodo($$[$0-1],"/"));
                            this.$.addHijo($$[$0]);
                            tokenArray.push("Token: " +$$[$0-1]+ " - Tipo: simbolo");  
                        
break;
case 131:
 this.$ = new Nodo("EXP",""); 
                    this.$.addHijo($$[$0-1]);
                    this.$.addHijo(new Nodo($$[$0],"++"));
                    tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo");  
                
break;
case 132:
 this.$ = new Nodo("EXP",""); 
                    this.$.addHijo($$[$0-1]);
                    this.$.addHijo(new Nodo($$[$0],"--"));
                    tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo");  
                
break;
case 133:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo(new Nodo($$[$0-2],"("));
                            this.$.addHijo($$[$0-1]); 
                            this.$.addHijo(new Nodo($$[$0],")"));
                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo");  
                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo");  
                        
break;
case 134:
 this.$ = new Nodo("EXP","");
                        this.$.addHijo(new Nodo($$[$0],"numero"));
                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: numero");  
                    
break;
case 135:
 this.$ = new Nodo("EXP","");
                        this.$.addHijo(new Nodo($$[$0],"id"));
                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: id");  
                    
break;
case 136: case 140:
 this.$ = new Nodo("EXP","");
                        this.$.addHijo(new Nodo($$[$0],"cadena"));
                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: cadena");  
                    
break;
case 138:
 this.$ = new Nodo("EXP","");
                        this.$.addHijo(new Nodo($$[$0],"numero"));
                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: numero"); 
                    
break;
case 139:
 this.$ = new Nodo("EXP","");
                        this.$.addHijo(new Nodo($$[$0],"id"));
                        tokenArray.push("Token: " +$$[$0]+ " - Tipo: id"); 
                    
break;
case 141:
 this.$ = new Nodo("EXP","");
                            this.$.addHijo(new Nodo($$[$0-2],"("));
                            this.$.addHijo($$[$0-1]); 
                            this.$.addHijo(new Nodo($$[$0],")"));
                            tokenArray.push("Token: " +$$[$0-2]+ " - Tipo: simbolo"); 
                            tokenArray.push("Token: " +$$[$0]+ " - Tipo: simbolo"); 
                        
break;
case 142:

   if($$[$0]!=';' && !panic){
			let row = this._$.first_line;
			let column = this._$.first_column + 1;
	        let newError = count.toString() + "." + 
                " Error sintáctico: "+ $$[$0] +               
                "  - linea: " + row +
                " - columna: " + column +
                ". Se esperaba una instruccion correcta"
                "\n";
			count+=1;
			errors.push(newError);
			console.log('Este es un error sintactico: ' + $$[$0] + '. En la fila: '+ (yylineno + 1) + ', columna: '+this._$.first_column);
			panic = true;
    }else if($$[$0]==';'){
		panic = false;
	}
	
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:$V1},{1:[3]},{2:$V0,5:[1,7],6:8,7:9,9:$V1},o($V2,[2,3]),{8:[1,10]},{2:$V0,7:14,10:11,15:[1,12],16:[1,13]},{8:[2,142]},{1:[2,1]},o($V2,[2,2]),{8:[1,15]},o($V2,[2,5]),{11:[1,16]},{11:[2,8]},{11:[2,9]},{8:[1,17]},o($V2,[2,4]),{12:[1,18]},{11:[2,10]},{2:$V0,7:25,9:$V3,11:$V4,13:19,14:[1,20],17:21,18:22,19:23,20:24,22:$V5,25:$V6,26:$V7,28:$V8,40:$V9,53:$Va},{2:$V0,7:39,9:$V3,11:$V4,14:[1,34],17:35,18:36,19:37,20:38,22:$V5,25:$V6,26:$V7,28:$V8,40:$V9,53:$Va},o($V2,[2,7]),o($Vb,[2,12]),{8:[1,40],21:$Vc},o($Vb,[2,16]),o($Vb,[2,18]),{8:[1,42]},{2:$V0,7:51,22:[1,48],25:[1,47],26:[1,45],28:[1,46],29:43,34:[1,44],35:[1,49],40:[1,50]},{11:[1,52]},{11:[1,53]},{11:[1,54]},{11:[1,55]},{23:[1,56]},{11:[1,57]},{54:[1,58]},o($V2,[2,6]),o($Vb,[2,11]),{8:[1,59],21:$Vc},o($Vb,[2,15]),o($Vb,[2,17]),{8:[1,60]},o($Vb,[2,14]),{11:[1,61]},o($Vb,[2,20]),{11:[1,62]},{11:[2,47],35:[1,63]},{11:[2,42]},{11:[2,43]},{11:[2,44]},{11:[2,45]},{11:[2,46]},{11:[2,48]},{8:[1,64]},o($Vd,[2,28],{23:[1,65]}),o($Vd,[2,29],{23:[1,66]}),o($Vd,[2,30],{23:[1,67]}),o($Vd,[2,31],{23:[1,68]}),{24:[1,70],27:[1,69]},{23:[1,71]},{55:[1,72]},o($Vb,[2,13]),o($Vb,[2,19]),o($Vd,[2,21]),{30:[1,73]},{36:[1,74]},{11:[2,49]},{24:[1,75]},{24:[1,76]},{11:[1,78],27:[1,77]},{11:[1,80],27:[1,79]},o($Vd,[2,32]),o($Vd,[2,33]),{62:[1,81],63:[1,82]},{54:[1,83]},{2:$V0,7:87,21:$Ve,22:$Vf,25:$Vg,26:$Vh,28:$Vi,31:84,32:[1,85],40:$Vj,41:86},{30:[1,94]},o($Vd,[2,22]),o($Vd,[2,23]),o($Vd,[2,24]),o($Vd,[2,26]),o($Vd,[2,25]),o($Vd,[2,27]),{8:[1,95]},{8:[1,96]},{56:[1,97],58:[1,98]},{21:$Ve,22:$Vf,25:$Vg,26:$Vh,28:$Vi,32:[1,99],40:$Vj,41:100},{8:[1,102],12:[1,101]},o($Vk,[2,51]),{8:[1,103]},{11:[1,104]},{11:[1,105]},{11:[1,106]},{11:[1,107]},{11:[1,108]},o($Vk,[2,58]),{22:[1,109]},o($Vl,[2,89]),o($Vl,[2,90]),{30:[1,110]},{30:[1,111]},{8:[1,113],12:[1,112]},o($Vk,[2,50]),o($Vm,$Vn,{33:114,42:116,46:118,47:119,19:120,20:121,45:122,7:123,57:136,2:$V0,11:$Vo,14:[1,115],22:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,30:$Vv,40:$V9,43:$Vw,44:$Vx,48:$Vy,51:$Vz,52:$VA,53:$Va,59:$VB,60:$VC,61:$VD}),o($Vb,[2,39]),o($Vk,[2,52]),o($Vk,[2,53]),o($Vk,[2,54]),o($Vk,[2,55]),o($Vk,[2,56]),o($Vk,[2,57]),{37:[1,140]},o($VE,$Vn,{57:141,11:$VF,24:$Vq,27:$Vt,30:$Vv}),o($VE,$Vn,{57:143,11:$VF,24:$Vq,27:$Vt,30:$Vv}),o($Vm,$Vn,{42:116,46:118,47:119,19:120,20:121,45:122,7:123,57:136,33:144,2:$V0,11:$Vo,14:[1,145],22:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,30:$Vv,40:$V9,43:$Vw,44:$Vx,48:$Vy,51:$Vz,52:$VA,53:$Va,59:$VB,60:$VC,61:$VD}),o($Vb,[2,38]),o($Vm,$Vn,{57:136,42:147,46:149,47:150,19:151,20:152,45:153,7:154,2:$V0,11:$Vo,14:[1,146],22:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,30:$Vv,40:$V9,43:$VG,44:$Vx,48:$Vy,51:$Vz,52:$VA,53:$Va,59:$VB,60:$VC,61:$VD}),o($Vb,[2,37]),{12:[1,155]},{12:[1,156]},{8:[1,157],21:$VH},{8:[1,159]},o($VI,[2,72]),o($VI,[2,74]),{8:[1,160],66:$VJ},{8:[1,162]},{30:[1,163]},{30:[1,164]},{30:[1,165]},{12:[2,83],51:[1,166]},{11:[1,167]},{11:[1,168]},{11:[1,169]},{11:[1,170]},o($Vm,$VK,{23:[1,171]}),{8:[2,86]},{8:[2,87]},o([8,64,65,67,69,70,71,72,73,74,75,76,77,78,79,80,81],$Vn,{57:172,11:$VF,24:$Vq,27:$Vt,30:$Vv}),o($VL,[2,116],{64:$VM,65:$VN,67:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$}),o($VE,$Vn,{57:189,11:$VF,24:$Vq,27:$Vt,30:$Vv}),o($V01,[2,134]),o($V01,[2,136]),{38:[1,190]},{32:[1,191],64:$VM,65:$VN,67:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($V01,$VK),{32:[1,192],64:$VM,65:$VN,67:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},o($Vm,$Vn,{57:136,42:147,46:149,47:150,19:151,20:152,45:153,7:154,2:$V0,11:$Vo,14:[1,193],22:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,30:$Vv,40:$V9,43:$VG,44:$Vx,48:$Vy,51:$Vz,52:$VA,53:$Va,59:$VB,60:$VC,61:$VD}),o($Vb,[2,36]),o($Vb,[2,35]),{12:[1,194]},{12:[1,195]},{8:[1,196],21:$VH},{8:[1,197]},o($VI,[2,71]),o($VI,[2,73]),{8:[1,198],66:$VJ},{8:[1,199]},o($Vm,$Vn,{42:116,46:118,47:119,19:120,20:121,45:122,7:123,57:136,33:201,2:$V0,11:$Vo,14:[1,200],22:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,30:$Vv,40:$V9,43:$Vw,44:$Vx,48:$Vy,51:$Vz,52:$VA,53:$Va,59:$VB,60:$VC,61:$VD}),o($Vm,$Vn,{42:116,46:118,47:119,19:120,20:121,45:122,7:123,57:136,33:202,2:$V0,11:$Vo,14:[1,203],22:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,30:$Vv,40:$V9,43:$Vw,44:$Vx,48:$Vy,51:$Vz,52:$VA,53:$Va,59:$VB,60:$VC,61:$VD}),o($VI,[2,68]),{11:[1,204]},o($VI,[2,70]),o($VI,[2,76]),o($V01,$Vn,{57:205,11:$VF,24:$Vq,27:$Vt,30:$Vv}),o($VI,[2,78]),{2:$V0,7:211,22:[1,210],25:[1,209],26:[1,207],28:[1,208],49:206},o($V11,$Vn,{57:136,45:212,11:$VF,24:$Vq,27:$Vt,30:$Vv}),o($V11,$Vn,{57:136,45:213,11:$VF,24:$Vq,27:$Vt,30:$Vv}),{30:[1,214]},o($Vd,[2,109],{23:[1,215]}),o($Vd,[2,110],{23:[1,216]}),o($Vd,[2,111],{23:[1,217]}),o($Vd,[2,112],{23:[1,218]}),{24:[1,220],27:[1,219]},{8:[2,88],64:$VM,65:$VN,67:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{11:$V21,24:$V31,27:$V41,30:$V51,68:221},{11:$V21,24:$V31,27:$V41,30:$V51,68:226},{11:$V21,24:$V31,27:$V41,30:$V51,68:227},{11:$V21,24:$V31,27:$V41,30:$V51,68:228},{11:$V21,24:$V31,27:$V41,30:$V51,68:229},{11:$V21,24:$V31,27:$V41,30:$V51,68:230},{11:$V21,24:$V31,27:$V41,30:$V51,68:231},{11:$V21,24:$V31,27:$V41,30:$V51,68:232},{11:$V21,24:$V31,27:$V41,30:$V51,68:233},{11:$V21,24:$V31,27:$V41,30:$V51,68:234},{11:$V21,24:$V31,27:$V41,30:$V51,68:235},{11:$V21,24:$V31,27:$V41,30:$V51,68:236},{11:$V21,24:$V31,27:$V41,30:$V51,68:237},{11:$V21,24:$V31,27:$V41,30:$V51,68:238},o($V01,[2,131]),o($V01,[2,132]),{32:[1,239],64:$VM,65:$VN,67:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{39:[1,240]},{8:[1,241]},{8:[1,242]},o($Vb,[2,34]),o($Vm,$Vn,{42:116,46:118,47:119,19:120,20:121,45:122,7:123,57:136,33:244,2:$V0,11:$Vo,14:[1,243],22:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,30:$Vv,40:$V9,43:$Vw,44:$Vx,48:$Vy,51:$Vz,52:$VA,53:$Va,59:$VB,60:$VC,61:$VD}),o($Vm,$Vn,{42:116,46:118,47:119,19:120,20:121,45:122,7:123,57:136,33:245,2:$V0,11:$Vo,14:[1,246],22:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,30:$Vv,40:$V9,43:$Vw,44:$Vx,48:$Vy,51:$Vz,52:$VA,53:$Va,59:$VB,60:$VC,61:$VD}),o($VI,[2,67]),o($VI,[2,69]),o($VI,[2,75]),o($VI,[2,77]),o($VI,[2,60]),o($Vm,$Vn,{57:136,42:147,46:149,47:150,19:151,20:152,45:153,7:154,2:$V0,11:$Vo,14:[1,247],22:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,30:$Vv,40:$V9,43:$VG,44:$Vx,48:$Vy,51:$Vz,52:$VA,53:$Va,59:$VB,60:$VC,61:$VD}),o($Vm,$Vn,{57:136,42:147,46:149,47:150,19:151,20:152,45:153,7:154,2:$V0,11:$Vo,14:[1,248],22:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,30:$Vv,40:$V9,43:$VG,44:$Vx,48:$Vy,51:$Vz,52:$VA,53:$Va,59:$VB,60:$VC,61:$VD}),{44:[1,249]},o($Vd,[2,101]),o($VL,[2,115],{64:$VM,65:$VN,67:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$}),{8:[1,250],23:[1,251]},{11:[1,252]},{11:[1,253]},{11:[1,254]},{11:[1,255]},{8:[1,256]},{32:[1,257],66:$VJ},{32:[1,258],66:$VJ},o($V11,$Vn,{57:136,45:259,11:$VF,24:$Vq,27:$Vt,30:$Vv}),{11:[1,261],24:[1,260]},{24:[1,262]},{11:[1,264],27:[1,263]},{11:[1,266],27:[1,265]},o($Vd,[2,113]),o($Vd,[2,114]),o($V01,[2,117]),o($V01,[2,138]),o($V01,[2,139]),o($V01,[2,140]),o($VE,$Vn,{57:267,11:$VF,24:$Vq,27:$Vt,30:$Vv}),o($V01,[2,118]),o($V01,[2,119]),o($V01,[2,120]),o($V01,[2,121]),o($V01,[2,122]),o($V01,[2,123]),o($V01,[2,124]),o($V01,[2,125]),o($V01,[2,126]),o($V01,[2,127]),o($V01,[2,128]),o($V01,[2,129]),o($V01,[2,130]),o($V01,[2,133]),{32:[1,268]},o($Vl,[2,84]),o($Vl,[2,85]),o($VI,[2,59]),o($Vm,$Vn,{57:136,42:147,46:149,47:150,19:151,20:152,45:153,7:154,2:$V0,11:$Vo,14:[1,269],22:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,30:$Vv,40:$V9,43:$VG,44:$Vx,48:$Vy,51:$Vz,52:$VA,53:$Va,59:$VB,60:$VC,61:$VD}),o($Vm,$Vn,{57:136,42:147,46:149,47:150,19:151,20:152,45:153,7:154,2:$V0,11:$Vo,14:[1,270],22:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,30:$Vv,40:$V9,43:$VG,44:$Vx,48:$Vy,51:$Vz,52:$VA,53:$Va,59:$VB,60:$VC,61:$VD}),{44:[1,271]},o($VI,[2,62]),{44:[1,272]},{30:[1,273]},o($Vm,$Vn,{57:136,45:274,11:$VF,24:$Vq,27:$Vt,30:$Vv}),{11:[1,276],27:[1,275]},o($V61,[2,94]),o($V61,[2,95]),o($V61,[2,96]),o($V61,[2,97]),o($V61,[2,100]),{12:[2,80]},{12:[2,81]},{32:[1,277],66:$VJ},o($Vd,[2,102]),o($Vd,[2,103]),o($Vd,[2,104]),o($Vd,[2,105]),o($Vd,[2,107]),o($Vd,[2,106]),o($Vd,[2,108]),{32:[1,278],64:$VM,65:$VN,67:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,77:$VX,78:$VY,79:$VZ,80:$V_,81:$V$},{12:[1,279]},o($VI,[2,61]),{44:[1,280]},{30:[1,281]},{30:[1,282]},o($V11,$Vn,{57:136,45:283,11:$VF,24:$Vq,27:$Vt,30:$Vv}),{8:[1,284],66:$VJ},o($V61,[2,98]),o($V61,[2,99]),{12:[2,82]},o($V01,[2,141]),o($Vm,$Vn,{42:116,46:118,47:119,19:120,20:121,45:122,7:123,57:136,33:285,2:$V0,11:$Vo,14:[1,286],22:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,30:$Vv,40:$V9,43:$Vw,44:$Vx,48:$Vy,51:$Vz,52:$VA,53:$Va,59:$VB,60:$VC,61:$VD}),{30:[1,287]},o($V11,$Vn,{57:136,45:288,11:$VF,24:$Vq,27:$Vt,30:$Vv}),o($V11,$Vn,{57:136,45:289,11:$VF,24:$Vq,27:$Vt,30:$Vv}),{32:[1,290],66:$VJ},{2:$V0,7:293,11:[1,292],50:291},o($Vm,$Vn,{57:136,42:147,46:149,47:150,19:151,20:152,45:153,7:154,2:$V0,11:$Vo,14:[1,294],22:$Vp,24:$Vq,25:$Vr,26:$Vs,27:$Vt,28:$Vu,30:$Vv,40:$V9,43:$VG,44:$Vx,48:$Vy,51:$Vz,52:$VA,53:$Va,59:$VB,60:$VC,61:$VD}),o($Vb,[2,41]),o($V11,$Vn,{57:136,45:295,11:$VF,24:$Vq,27:$Vt,30:$Vv}),{32:[1,296],66:$VJ},{32:[1,297],66:$VJ},{8:[1,298]},{32:[1,299]},{64:[1,300],65:[1,301]},{8:[1,302]},o($Vb,[2,40]),{32:[1,303],66:$VJ},{8:[1,304]},{8:[1,305]},o($VI,[2,66]),{12:[2,79]},{32:[2,91]},{32:[2,92]},{32:[2,93]},{8:[1,306]},o($VI,[2,65]),o($VI,[2,64]),o($VI,[2,63])],
defaultActions: {6:[2,142],7:[2,1],12:[2,8],13:[2,9],17:[2,10],45:[2,42],46:[2,43],47:[2,44],48:[2,45],49:[2,46],50:[2,48],64:[2,49],133:[2,86],134:[2,87],257:[2,80],258:[2,81],277:[2,82],299:[2,79],300:[2,91],301:[2,92],302:[2,93]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let tokenArray = new Array();
    module.exports.tokenArray = tokenArray;
    const Nodo = require('./arbolNodo');
    
    let panic = false
    let count = 1
    let errors = new Array();
    module.exports.errors = errors;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*skip*/
break;
case 1:yy_.yytext =yy_.yytext.substr(1,yy_.yyleng-2);  return 24; 
break;
case 2:/* skip multiline */      //%{yy_.yytext.substr(1,yy_.yyleng-2);  return 'tk_comentario_multilinea'; %}
break;
case 3:/* skip uniline */
break;
case 4: return 9; 
break;
case 5: return 15; 
break;
case 6: return 16; 
break;
case 7: return 26; 
break;
case 8: return 28; 
break;
case 9: return 25; 
break;
case 10: return 22; 
break;
case 11: return 35; 
break;
case 12: return 34; 
break;
case 13: return 36; 
break;
case 14: return 39; 
break;
case 15: return 48; 
break;
case 16: return 44; 
break;
case 17: return 43; 
break;
case 18: return 51; 
break;
case 19: return 52; 
break;
case 20: return 40; 
break;
case 21: return 59; 
break;
case 22: return 60; 
break;
case 23: return 61; 
break;
case 24: return 62; 
break;
case 25: return 63; 
break;
case 26: return 53; 
break;
case 27:return 54;
break;
case 28: return 55; 
break;
case 29: return 56; 
break;
case 30: return 58; 
break;
case 31: return 12; 
break;
case 32: return 14; 
break;
case 33: return 30; 
break;
case 34: return 32; 
break;
case 35: return 37; 
break;
case 36: return 38; 
break;
case 37: return 21; 
break;
case 38: return 8; 
break;
case 39:return 67
break;
case 40:return 69
break;
case 41:return 71
break;
case 42:return 73
break;
case 43:return 74
break;
case 44:return 72
break;
case 45:return 75
break;
case 46:return 76
break;
case 47:return 23
break;
case 48:return 77
break;
case 49:return 70
break;
case 50:return 64
break;
case 51:return 78
break;
case 52:return 65
break;
case 53:return 79
break;
case 54:return 80
break;
case 55:return 81
break;
case 56: return 27; 
break;
case 57: return 11; 
break;
case 58: return 5; 
break;
case 59: 
	let row = yy_.yylloc.first_line;
	let column = yy_.yylloc.first_column + 1;
	let newError = count.toString() + "." +
                " Error léxico: "+ yy_.yytext + 
                " - linea: " + row +
                " - columna: " + column +
                ". No pertenece al lenguaje"
                "\n";
	count+=1;
	errors.push(newError);
	console.log('Error lexico: \'' + yy_.yytext + '\'. En fila: ' + row + ', columna: ' + column + '.');
	
break;
}
},
rules: [/^(?:[ \t\r\n\f])/i,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:public\b)/i,/^(?:class\b)/i,/^(?:interface\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:static\b)/i,/^(?:main\b)/i,/^(?:args\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:boolean\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:system\b)/i,/^(?:\.)/i,/^(?:out\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:,)/i,/^(?:;)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\^)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:[0-9]+(\.[0-9]+)*)/i,/^(?:[a-z]([a-z0-9_])*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}